Temporary new or forgot temporary passwords are now only provided by e-mail. 
A new 'timestamp' column in the User Table provides a limited amount of time
to setup a permanent password. The 'timestamp' column helps limit the number
of e-mails sent to the user. There is a new list of job skills that follows
the setup for education. The Skill-Set Table references the skill ID
as a foreign key. Users are provided with a list of
existing skills to pick from by means of JSON enquiries to the website
just as the names of schools was provided in the original project. A degree
and major subject Award box was added to the Education Table.
The education table now has a triple many-to-one relationship based on
three foreign keys including the new degree column. Offensive language blocking
was added to the website. This is accomplished in the browser by borrowing
the JSON request method from the Web-Development course where the 'school.php'
file at the website searched the database for existing schools.
Using a similar JSON technique, text entered by the user is received in the file
'jsonLanguage.php' at the website and the Dictionary and Offensive word
database tables are queried. The file 'jsonLanguage.php' is nearly identical
to 'school.php' file for the capstone project. The language filter algorithm
starts by removing punctuation and exploding the text phrase into
an array of words which are automatically accepted if they are
in the dictionary table. If the words are not in the
dictionary, the data is still entered into the database after further filtering
for offensive words using the Offensive table. A variable JavaScript
associated array is used to keep track of the character
counts of the data form boxes that have been clicked. A different basic
array or simple vector list holds the entry box ID numbers for boxes
which have been clicked but not tested yet. Whenever a data-entry box is clicked:
- A new element is added to the simple vector list or stack using the array
  push method that places the new element on top of the stack. A new key-pair
  is added to the associated array with an initial value of -1.
- An offensive language test by means of a JSON request is started if its
  character count is different than the stored value in the assocaiated array.
  Since the box that was clicked is often empty, the test is carried out for
  the element on the bottom of the stack array after which it is removed
  from the array. The new character count is stored in the associated array.
- If there is a problem with the language test, a message pops-up alerting
  the user and the box appearance changes using the JQuery Library.
  If the test result is positive, the box appearance is reset.

The email confirmations after obtaining new passwords are handled by means of
the 'PHPMailer' package installed using the Compose Package.

JavaScript Empowers Users: (a) Creating Data Entry Elements; A further
enhancement is the use of JavaScript to change the layout for mobile
devices by making DOM elements directly, which is an alternate way of page
modification in addition to the hot element insertion blocks and the jQuery
append methods. (b) Adapting the Presentation Layout for Small Devices Like Phones
by placing the start and final year entry boxes on the same line for wide screens.
(c) There are JavaScript arrays for all data boxes added by the user for job skills,
education, and work exerience for which there is a final data validation
when the browser submits data to the website. In addition, the last data box
that was clicked is checked for offensive language using an asynchronous
AJAX request that prevents the form being submitted until an all-clear
JSON response is received from the website. All of the validation is
repeated at the website. Final validation at the website was tested with the
JavaScript protection defeated. THE END